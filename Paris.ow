disabled rule("|-------------------------------------------------------------------------------| START SETTINGS")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}
}

rule("| INFINITE ULT USING FOR NOT MODER/LEADER | [ONLY ANA,BAPTISTE,MCCREE,ORISA] / P.VARS: G /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Or(Or(Or(Compare(Hero Of(Event Player), ==, Hero(Ana)), Compare(Hero Of(Event Player), ==, Hero(Baptiste))), Compare(Hero Of(
			Event Player), ==, Hero(McCree))), Compare(Hero Of(Event Player), ==, Hero(Orisa))) == True;
		Is Button Held(Event Player, Ultimate) == True;
		Player Variable(Event Player, G) == 0;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
	}
}

rule("| TEXTS AND JUMP | / P.VARS: C,B,F,G /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Create HUD Text(Event Player, String("{0}: {1}", String("In View", Null, Null, Null), Player Variable(Event Player, C), Null),
			Null, Null, Left, 2, White, White, White, String, Default Visibility);
		Create HUD Text(Event Player, String("{0}: {1}", String("Speed", Null, Null, Null), Player Variable(Event Player, F), Null), Null,
			Null, Left, 3, White, White, White, String, Default Visibility);
		Create In-World Text(Filtered Array(All Players(All Teams), Compare(Player Variable(Current Array Element, G), >, 0)), String(
			"{0}: {1}", Hero Icon String(Hero Of(Event Player)), Event Player, Null), Add(Event Player, Vector(0, Add(Player Variable(
			Event Player, B), 0.400), 0)), 1.100, Do Not Clip, Visible To Position and String, White, Default Visibility);
		Disallow Button(Event Player, Jump);
	}
}

rule("| TEXTS WHEN NOT INVISIBILITY | / P.VARS: M /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, M) == 0;
	}

	actions
	{
		Set Invisible(Event Player, None);
		Create In-World Text(All Players(All Teams), String("{0}: {1}", String("In View", Null, Null, Null), Player Variable(Event Player,
			C), Null), Add(Event Player, Vector(0, Add(Player Variable(Event Player, B), -0.200), 0)), 1, Clip Against Surfaces,
			Visible To Position and String, White, Default Visibility);
		Set Player Variable At Index(Event Player, J, 0, Last Text ID);
		Create In-World Text(All Players(All Teams), String("{0}: {1}", String("Speed", Null, Null, Null), Player Variable(Event Player,
			F), Null), Add(Event Player, Vector(0, Add(Player Variable(Event Player, B), -0.100), 0)), 1, Clip Against Surfaces,
			Visible To Position and String, White, Default Visibility);
		Set Player Variable At Index(Event Player, J, 1, Last Text ID);
	}
}

rule("| RISE |")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Jump) == True;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Rooted) == False;
		Has Status(Event Player, Stunned) == False;
	}

	actions
	{
		Wait(0.020, Ignore Condition);
		Apply Impulse(Event Player, Up, 4, To World, Cancel Contrary Motion);
		Loop If Condition Is True;
	}
}

rule("/ P.VARS: A,C,F /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Players In Slot(0, Team 1) != Event Player;
	}

	actions
	{
		Set Player Variable(Event Player, A, 1);
		Set Player Variable(Event Player, C, 1);
		Set Player Variable(Event Player, F, 100);
	}
}

disabled rule("|____________________ [POSITIONS OF TEXTS/EFFECTS FOR HEROES] ____________________|")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}
}

rule("| TRACER,HANZO,PHARAH,SYMMETRA,GENJI,MCCREE,JUNKRAT,LUCIO,MEI,SOMBRA,DOOMFIST,ANA,ASHE,BAPTISTE | / P.VARS: B /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Compare(Hero Of(Event Player), ==, Hero(Tracer)), Compare(Hero Of(Event Player), ==, Hero(
			Hanzo))), Compare(Hero Of(Event Player), ==, Hero(Pharah))), Compare(Hero Of(Event Player), ==, Hero(Symmetra))), Compare(
			Hero Of(Event Player), ==, Hero(Genji))), Compare(Hero Of(Event Player), ==, Hero(McCree))), Compare(Hero Of(Event Player), ==,
			Hero(Junkrat))), Compare(Hero Of(Event Player), ==, Hero(Lúcio))), Compare(Hero Of(Event Player), ==, Hero(Mei))), Compare(
			Hero Of(Event Player), ==, Hero(Sombra))), Compare(Hero Of(Event Player), ==, Hero(Doomfist))), Compare(Hero Of(Event Player),
			==, Hero(Ana))), Compare(Hero Of(Event Player), ==, Hero(Ashe))), Compare(Hero Of(Event Player), ==, Hero(Baptiste))) == True;
	}

	actions
	{
		Set Player Variable(Event Player, B, 1.800);
	}
}

rule("| REINHARDT,WINSTON,BASTION,ROADHOG,ZARYA,ORISA,WRECKING BALL | / P.VARS: B /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Or(Or(Or(Or(Or(Or(Compare(Hero Of(Event Player), ==, Hero(Reinhardt)), Compare(Hero Of(Event Player), ==, Hero(Winston))), Compare(
			Hero Of(Event Player), ==, Hero(Bastion))), Compare(Hero Of(Event Player), ==, Hero(Roadhog))), Compare(Hero Of(Event Player),
			==, Hero(Zarya))), Compare(Hero Of(Event Player), ==, Hero(Orisa))), Compare(Hero Of(Event Player), ==, Hero(Wrecking Ball)))
			== True;
	}

	actions
	{
		Set Player Variable(Event Player, B, 2.200);
	}
}

rule("| REAPER,MERCY,WIDOWMAKER,ZENYATTA,SOLDIER: 76,BRIGITTE,MOIRA | / P.VARS: B /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Or(Or(Or(Or(Or(Or(Compare(Hero Of(Event Player), ==, Hero(Reaper)), Compare(Hero Of(Event Player), ==, Hero(Mercy))), Compare(
			Hero Of(Event Player), ==, Hero(Widowmaker))), Compare(Hero Of(Event Player), ==, Hero(Zenyatta))), Compare(Hero Of(
			Event Player), ==, Hero(Soldier: 76))), Compare(Hero Of(Event Player), ==, Hero(Brigitte))), Compare(Hero Of(Event Player), ==,
			Hero(Moira))) == True;
	}

	actions
	{
		Set Player Variable(Event Player, B, 2);
	}
}

rule("| SIGMA | / P.VARS: B /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Sigma);
	}

	actions
	{
		Set Player Variable(Event Player, B, 2.600);
	}
}

rule("| TORBJORN | / P.VARS: B /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Torbjörn);
	}

	actions
	{
		Set Player Variable(Event Player, B, 1.600);
	}
}

rule("| D.VA | / P.VARS: B /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(D.Va);
		Max Health(Event Player) == Absolute Value(600);
	}

	actions
	{
		Set Player Variable(Event Player, B, 2.200);
	}
}

rule("| BABY D.VA | / P.VARS: B /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(D.Va);
		Max Health(Event Player) == Absolute Value(150);
	}

	actions
	{
		Set Player Variable(Event Player, B, 1.800);
	}
}

disabled rule("|-----------------------------------------------------------------------------------| TELEPORTS")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}
}

rule("| EFFECTS |")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Effect(All Players(All Teams), Good Aura, White, Vector(-108.774, 16.444, -110.134), 1, Visible To);
		Create Effect(All Players(All Teams), Good Aura, White, Vector(20.847, 12.444, -68.634), 1, Visible To);
		Create Effect(All Players(All Teams), Good Aura, White, Vector(-32.921, 13.433, 30.142), 1, Visible To);
		Create Effect(All Players(All Teams), Good Aura, White, Vector(-78.002, 14.444, -102.497), 1, Visible To);
	}
}

rule("| FROM SPAWN |")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Or(Compare(Distance Between(Event Player, Vector(20.847, 12.444, -68.634)), <=, 1.800), Compare(Distance Between(Event Player,
			Vector(-108.774, 16.444, -110.134)), <=, 1.800)) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(-54.351, 12.472, 13.896));
		Play Effect(All Players(All Teams), Good Pickup Effect, White, Event Player, 1);
		Play Effect(All Players(All Teams), Ring Explosion, White, Event Player, 4);
	}
}

rule("| PIANO 1 |")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-78.002, 14.444, -102.497)) <= 1.800;
	}

	actions
	{
		Teleport(Event Player, Vector(-44.649, 12.433, 31.700));
		Play Effect(All Players(All Teams), Good Pickup Effect, White, Event Player, 1);
		Play Effect(All Players(All Teams), Ring Explosion, White, Event Player, 4);
	}
}

rule("| PIANO 2 |")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-32.921, 13.433, 30.142)) <= 1.800;
	}

	actions
	{
		Teleport(Event Player, Vector(-86.262, 13.444, -110.700));
		Play Effect(All Players(All Teams), Good Pickup Effect, White, Event Player, 1);
		Play Effect(All Players(All Teams), Ring Explosion, White, Event Player, 4);
	}
}

disabled rule("|____________________ [SOUNDS] ____________________|")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}
}

rule("| FROM SPAWN |")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is True For Any(All Players(All Teams), Or(Compare(Distance Between(Current Array Element, Vector(20.847, 12.444, -68.634)), <=,
			1.800), Compare(Distance Between(Current Array Element, Vector(-108.774, 16.444, -110.134)), <=, 1.800))) == True;
	}

	actions
	{
		Wait(0.060, Ignore Condition);
		Play Effect(All Players(All Teams), Ring Explosion Sound, White, Vector(-54.351, 12.472, 13.896), 80);
	}
}

rule("| PIANO 1 |")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is True For Any(All Players(All Teams), Compare(Distance Between(Current Array Element, Vector(-78.002, 14.444, -102.497)), <=,
			1.800)) == True;
	}

	actions
	{
		Wait(0.060, Ignore Condition);
		Play Effect(All Players(All Teams), Ring Explosion Sound, White, Vector(-44.649, 12.433, 31.700), 80);
	}
}

rule("| PIANO 2 |")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is True For Any(All Players(All Teams), Compare(Distance Between(Current Array Element, Vector(-32.921, 13.433, 30.142)), <=,
			1.800)) == True;
	}

	actions
	{
		Wait(0.060, Ignore Condition);
		Play Effect(All Players(All Teams), Ring Explosion Sound, White, Vector(-86.262, 13.444, -110.700), 80);
	}
}

disabled rule("|--------------------------------------------------------------------------------| ENTER PLACES")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}
}

rule("| EFFECTS |")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Blue, Vector(-45.174, 10.204, -56.425), 0.800, Visible To);
		Create Effect(All Players(All Teams), Ring, Red, Vector(-35.615, 10.141, -68.173), 0.800, Visible To);
		Create In-World Text(All Players(All Teams), String("Inside", Null, Null, Null), Vector(-45.174, 10.203, -56.425), 1.200,
			Clip Against Surfaces, Visible To and String, White, Default Visibility);
		Create In-World Text(All Players(All Teams), String("Outside", Null, Null, Null), Vector(-35.615, 10.147, -68.173), 1.200,
			Clip Against Surfaces, Visible To and String, White, Default Visibility);
		Create Effect(All Players(All Teams), Ring, Blue, Vector(-30.761, 11.471, 17.838), 0.800, Visible To);
		Create Effect(All Players(All Teams), Ring, Red, Vector(-28.575, 11.433, 20.052), 0.800, Visible To);
		Create In-World Text(All Players(All Teams), String("Inside", Null, Null, Null), Vector(-30.761, 11.471, 17.838), 1.200,
			Clip Against Surfaces, Visible To and String, White, Default Visibility);
		Create In-World Text(All Players(All Teams), String("Outside", Null, Null, Null), Vector(-28.575, 11.434, 20.052), 1.200,
			Clip Against Surfaces, Visible To and String, White, Default Visibility);
		Create Effect(All Players(All Teams), Ring, Blue, Vector(-9.170, 11.434, 39.392), 0.800, Visible To);
		Create Effect(All Players(All Teams), Ring, Red, Vector(-11.540, 28.395, 37.084), 0.800, Visible To);
		Create In-World Text(All Players(All Teams), String("Up", Null, Null, Null), Vector(-9.170, 11.434, 39.392), 1.200,
			Clip Against Surfaces, Visible To and String, White, Default Visibility);
		Create In-World Text(All Players(All Teams), String("Down", Null, Null, Null), Vector(-11.540, 28.391, 37.084), 1.200,
			Clip Against Surfaces, Visible To and String, White, Default Visibility);
		Create Effect(All Players(All Teams), Ring, Blue, Vector(-33.804, 13.433, 32.457), 0.800, Visible To);
		Create Effect(All Players(All Teams), Ring, Red, Vector(-31.208, 12.377, 35.079), 0.800, Visible To);
		Create In-World Text(All Players(All Teams), String("Inside", Null, Null, Null), Vector(-33.804, 13.434, 32.457), 1.200,
			Clip Against Surfaces, Visible To and String, White, Default Visibility);
		Create In-World Text(All Players(All Teams), String("Outside", Null, Null, Null), Vector(-31.208, 12.383, 35.079), 1.200,
			Clip Against Surfaces, Visible To and String, White, Default Visibility);
		Create Effect(All Players(All Teams), Ring, Blue, Vector(16.606, 11.474, -41.318), 0.800, Visible To);
		Create Effect(All Players(All Teams), Ring, Red, Vector(20.983, 11.478, -37.021), 0.800, Visible To);
		Create In-World Text(All Players(All Teams), String("Inside", Null, Null, Null), Vector(16.606, 11.474, -41.318), 1.200,
			Clip Against Surfaces, Visible To and String, White, Default Visibility);
		Create In-World Text(All Players(All Teams), String("Outside", Null, Null, Null), Vector(20.983, 11.479, -37.021), 1.200,
			Clip Against Surfaces, Visible To and String, White, Default Visibility);
		Create Effect(All Players(Team 2), Ring, Blue, Vector(-91.169, 14.444, -108.386), 0.800, Visible To);
		Create Effect(All Players(Team 2), Ring, Red, Vector(-92.849, 14.444, -111.786), 0.800, Visible To);
		Create In-World Text(All Players(Team 2), String("Inside", Null, Null, Null), Vector(-91.169, 14.444, -108.386), 1.200,
			Clip Against Surfaces, Visible To and String, White, Default Visibility);
		Create In-World Text(All Players(Team 2), String("Outside", Null, Null, Null), Vector(-92.849, 14.444, -111.786), 1.200,
			Clip Against Surfaces, Visible To and String, White, Default Visibility);
		Create Effect(All Players(Team 1), Ring, Blue, Vector(15.974, 11.367, -59.651), 0.800, Visible To);
		Create Effect(All Players(Team 1), Ring, Red, Vector(17.736, 11.454, -62.810), 0.800, Visible To);
		Create In-World Text(All Players(Team 1), String("Inside", Null, Null, Null), Vector(15.974, 11.367, -59.651), 1.200,
			Clip Against Surfaces, Visible To and String, White, Default Visibility);
		Create In-World Text(All Players(Team 1), String("Outside", Null, Null, Null), Vector(17.736, 11.454, -62.810), 1.200,
			Clip Against Surfaces, Visible To and String, White, Default Visibility);
	}
}

rule("| ENTER BUILIDING 1 |")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-30.761, 11.471, 17.838)) <= 1.550;
	}

	actions
	{
		Teleport(Event Player, Vector(-27.254, 10.434, 21.370));
		Small Message(Event Player, String("Inside", Null, Null, Null));
	}
}

rule("| EXIT BUILIDING 1 |")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-28.575, 11.434, 20.052)) <= 1.550;
	}

	actions
	{
		Teleport(Event Player, Vector(-32.278, 10.471, 16.348));
		Small Message(Event Player, String("Outside", Null, Null, Null));
	}
}

rule("| ENTER BUILIDING 1 (2) |")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-33.804, 13.434, 32.457)) <= 1.550;
	}

	actions
	{
		Teleport(Event Player, Vector(-28.595, 10.433, 37.579));
		Small Message(Event Player, String("Inside", Null, Null, Null));
	}
}

rule("| EXIT BUILIDING 1 (2) |")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-31.208, 11.882, 35.079)) <= 1.550;
	}

	actions
	{
		Teleport(Event Player, Vector(-34.787, 12.433, 31.391));
		Small Message(Event Player, String("Outside", Null, Null, Null));
	}
}

rule("| ENTER 1 BUILIDING'S ROOF |")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-9.170, 11.434, 39.392)) <= 1.550;
	}

	actions
	{
		Teleport(Event Player, Vector(-13.477, 27.033, 35.148));
		Small Message(Event Player, String("Up", Null, Null, Null));
	}
}

rule("| EXIT 1 BUILIDING'S ROOF |")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-11.540, 28.391, 37.084)) <= 1.550;
	}

	actions
	{
		Teleport(Event Player, Vector(-9.407, 10.434, 36.273));
		Small Message(Event Player, String("Down", Null, Null, Null));
	}
}

rule("| ENTER BUILIDING 2 |")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(16.606, 11.474, -41.318)) <= 1.550;
	}

	actions
	{
		Teleport(Event Player, Vector(22.134, 10.474, -35.796));
		Small Message(Event Player, String("Inside", Null, Null, Null));
	}
}

rule("| EXIT BUILIDING 2 |")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(20.983, 11.478, -37.021)) <= 1.550;
	}

	actions
	{
		Teleport(Event Player, Vector(15.158, 10.472, -42.754));
		Small Message(Event Player, String("Outside", Null, Null, Null));
	}
}

rule("| ENTER OUT OF MAP GATES |")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-45.174, 10.203, -56.425)) <= 1.550;
	}

	actions
	{
		Teleport(Event Player, Vector(-34.493, 9.160, -75.866));
		Small Message(Event Player, String("Inside", Null, Null, Null));
	}
}

rule("| EXIT OUT OF MAP GATES |")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-35.615, 10.147, -68.173)) <= 1.550;
	}

	actions
	{
		Teleport(Event Player, Vector(-46.602, 9.268, -54.806));
		Small Message(Event Player, String("Outside", Null, Null, Null));
	}
}

rule("| ENTER TEAM 1 SPAWN |")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-91.169, 14.444, -108.386)) <= 1.550;
		Team Of(Event Player) == Team 2;
	}

	actions
	{
		Teleport(Event Player, Vector(-93.656, 13, -113.422));
		Small Message(Event Player, String("Inside", Null, Null, Null));
	}
}

rule("| EXIT TEAM 1 SPAWN |")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-92.849, 14.444, -111.786)) <= 1.550;
		Team Of(Event Player) == Team 2;
	}

	actions
	{
		Teleport(Event Player, Vector(-90.335, 13, -106.756));
		Small Message(Event Player, String("Outside", Null, Null, Null));
	}
}

rule("| ENTER TEAM 2 SPAWN |")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(15.974, 11.367, -59.651)) <= 1.550;
		Team Of(Event Player) == Team 1;
	}

	actions
	{
		Teleport(Event Player, Vector(18.428, 11.454, -64.098));
		Small Message(Event Player, String("Inside", Null, Null, Null));
	}
}

rule("| EXIT TEAM 2 SPAWN |")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(17.736, 11.454, -62.810)) <= 1.550;
		Team Of(Event Player) == Team 1;
	}

	actions
	{
		Teleport(Event Player, Vector(14.928, 10, -57.705));
		Small Message(Event Player, String("Outside", Null, Null, Null));
	}
}

disabled rule("|---------------------------------------------------------------------------------| DANCE FLOOR")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}
}

rule("| EFFECTS | / G.VARS: A /")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Effect(All Players(All Teams), Sphere, Blue, Vector(-42.413, 20.950, -10.784), 0.750, Visible To);
		Create Effect(All Players(All Teams), Bad Aura, Purple, Vector(-42.413, 20.950, -10.784), 0.750, Visible To);
		Create Effect(All Players(All Teams), Sparkles, Red, Vector(-42.413, 20.500, -10.784), 6, Visible To);
		Create Effect(All Players(All Teams), Sparkles, Purple, Vector(-42.413, 18.500, -10.784), 6, Visible To);
		Create Effect(All Players(All Teams), Sparkles, Green, Vector(-42.413, 16.500, -10.784), 6, Visible To);
		Create Effect(All Players(All Teams), Sparkles, Yellow, Vector(-42.413, 14.500, -10.784), 6, Visible To);
		Create Effect(All Players(All Teams), Ring, Purple, Vector(-42.413, 14.500, -10.784), Global Variable(A),
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Light Shaft, Purple, Vector(-42.413, -4.000, -10.784), Global Variable(A),
			Visible To Position and Radius);
	}
}

rule("| LOOP EFFECTS |")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Wait(0.365, Ignore Condition);
		Play Effect(All Players(All Teams), Ring Explosion, Yellow, Vector(-42.413, 14.600, -10.784), 11);
		Wait(0.365, Ignore Condition);
		Play Effect(All Players(All Teams), Ring Explosion, Green, Vector(-42.413, 14.600, -10.784), 12);
		Wait(0.365, Ignore Condition);
		Play Effect(All Players(All Teams), Ring Explosion, Purple, Vector(-42.413, 14.600, -10.784), 13);
		Wait(0.365, Ignore Condition);
		Play Effect(All Players(All Teams), Ring Explosion, Red, Vector(-42.413, 14.600, -10.784), 14);
		Loop;
	}
}

rule("| CHASE G.VAR A | / G.VARS: A /")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Wait(2, Ignore Condition);
		Chase Global Variable Over Time(A, 5.500, 2, Destination and Duration);
		Wait(2, Ignore Condition);
		Chase Global Variable Over Time(A, 1.500, 2, Destination and Duration);
		Loop;
	}
}

disabled rule("|--------------------------------------------------------------------------------------| CAMERA")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}
}

rule("| CHANGE VIEW | / P.VARS: C /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Interact) == True;
		Player Variable(Event Player, C) < 8;
		Player Variable(Event Player, D) == 0;
	}

	actions
	{
		Modify Player Variable(Event Player, C, Add, 1);
	}
}

rule("| FIRST PERSON | / P.VARS: C /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, C) == 8;
		Player Variable(Event Player, D) == 0;
	}

	actions
	{
		Set Player Variable(Event Player, C, 1);
	}
}

disabled rule("|____________________ [VIEWS] ____________________|")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}
}

rule("| VIEW 1 | / P.VARS: C /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, C) == 1;
	}

	actions
	{
		Stop Camera(Event Player);
		Small Message(Event Player, String("{0} {1}", String("In View", Null, Null, Null), 1, Null));
	}
}

rule("| VIEW 2 | / P.VARS: C /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, C) == 2;
	}

	actions
	{
		Start Camera(Event Player, Add(Add(Multiply(Facing Direction Of(Event Player), -2.000), Event Player), World Vector Of(Vector(
			-1.200, 1.800, 0), Event Player, Rotation)), Add(Event Player, Multiply(Facing Direction Of(Event Player), 100)), 0);
		Small Message(Event Player, String("{0} {1}", String("In View", Null, Null, Null), 2, Null));
	}
}

rule("| VIEW 3 | / P.VARS: C /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, C) == 3;
	}

	actions
	{
		Start Camera(Event Player, Add(Add(Multiply(Facing Direction Of(Event Player), -3.500), Event Player), Vector(0, 2.100, 0)), Add(
			Event Player, Multiply(Facing Direction Of(Event Player), 100)), 0);
		Small Message(Event Player, String("{0} {1}", String("In View", Null, Null, Null), 3, Null));
	}
}

rule("| VIEW 4 | / P.VARS: C /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, C) == 4;
	}

	actions
	{
		Start Camera(Event Player, Add(Add(Multiply(Facing Direction Of(Event Player), -3.500), Event Player), Vector(0, 2.100, 0)),
			Ray Cast Hit Position(Eye Position(Event Player), Add(Multiply(Facing Direction Of(Event Player), 100), Eye Position(
			Event Player)), Null, All Players(All Teams), False), 4);
		Small Message(Event Player, String("{0} {1}", String("In View", Null, Null, Null), 4, Null));
	}
}

rule("| VIEW 5 | / P.VARS: C /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, C) == 5;
	}

	actions
	{
		Start Camera(Event Player, Add(Vector(0, 10, 0), Event Player), Add(Multiply(Facing Direction Of(Event Player), 4), Event Player),
			0);
		Small Message(Event Player, String("{0} {1}", String("In View", Null, Null, Null), 5, Null));
	}
}

rule("| VIEW 6 | / P.VARS: C /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, C) == 6;
	}

	actions
	{
		Start Camera(Event Player, Add(Add(Multiply(Facing Direction Of(Event Player), 1.500), Event Player), Vector(0, 1.600, 0)), Add(
			Event Player, Multiply(Facing Direction Of(Event Player), -100.000)), 0);
		Small Message(Event Player, String("{0} {1}", String("In View", Null, Null, Null), 6, Null));
	}
}

rule("| BONUS VIEW | / P.VARS: C /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, C) == 7;
	}

	actions
	{
		Start Camera(Event Player, Add(Add(Multiply(Facing Direction Of(Event Player), -0.600), Event Player), World Vector Of(Vector(
			0.050, 0.850, 0), Event Player, Rotation)), Add(Event Player, Multiply(Facing Direction Of(Event Player), 100)), 0);
		Small Message(Event Player, String("{0} {1} {2}", String("In View", Null, Null, Null), String("...", Null, Null, Null), String(
			"Oops", Null, Null, Null)));
	}
}

disabled rule("|--------------------------------------------------------------------------------| LOOTBOX SIMULATOR")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}
}

rule("| EFFECTS |")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Blue, Vector(-60.100, 13.472, 11.394), 0.700, Visible To);
		Create In-World Text(All Players(All Teams), String("Start", Null, Null, Null), Vector(-60.100, 12.028, 11.394), 1.200,
			Clip Against Surfaces, Visible To and String, White, Default Visibility);
	}
}

rule("| START | / G.VARS: B,C,D /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-60.100, 12.272, 11.394)) <= 0.675;
		Is Button Held(Event Player, Interact) == True;
		Global Variable(B) == 0;
	}

	actions
	{
		Play Effect(All Players(All Teams), Ring Explosion, Blue, Vector(-60.100, 12.028, 11.394), 1.450);
		Destroy Effect(Value In Array(Global Variable(C), 0));
		Destroy Effect(Value In Array(Global Variable(C), 1));
		Destroy Effect(Value In Array(Global Variable(C), 2));
		Destroy Effect(Value In Array(Global Variable(C), 3));
		Destroy In-World Text(Value In Array(Global Variable(C), 4));
		Destroy In-World Text(Value In Array(Global Variable(C), 5));
		Destroy In-World Text(Value In Array(Global Variable(C), 6));
		Destroy In-World Text(Value In Array(Global Variable(C), 7));
		Set Global Variable At Index(D, 0, Random Integer(1, 100));
		Set Global Variable At Index(D, 1, Random Integer(1, 5));
		Set Global Variable At Index(D, 2, Random Integer(1, 100));
		Set Global Variable At Index(D, 3, Random Integer(1, 5));
		Set Global Variable At Index(D, 4, Random Integer(1, 100));
		Set Global Variable At Index(D, 5, Random Integer(1, 5));
		Set Global Variable At Index(D, 6, Random Integer(1, 100));
		Set Global Variable At Index(D, 7, Random Integer(1, 5));
		Wait(0.005, Ignore Condition);
		Set Global Variable(B, 1);
		Wait(4.500, Ignore Condition);
		Set Global Variable(B, 0);
	}
}

disabled rule("|____________________ [SOUNDS] ____________________|")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}
}

rule("/ G.VARS: B /")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is True For Any(All Players(All Teams), Compare(Distance Between(Current Array Element, Vector(-60.100, 12.272, 11.394)), <=,
			0.675)) == True;
		Is True For Any(Filtered Array(All Players(All Teams), Compare(Distance Between(Current Array Element, Vector(-60.100, 12.272,
			11.394)), <=, 0.675)), Is Button Held(Current Array Element, Interact)) == True;
		Global Variable(B) == 0;
	}

	actions
	{
		Play Effect(All Players(All Teams), Ring Explosion Sound, White, Vector(-60.100, 12.272, 11.394), 80);
	}
}

disabled rule("|____________________ [DROPS] ____________________|")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}
}

rule("| DROP 1 | / G.VARS: B,D,E,C,F /")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(B) == 1;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Skip If(Compare(Value In Array(Global Variable(D), 0), >, 2), 5);
		Play Effect(All Players(All Teams), Good Pickup Effect, Yellow, Vector(-59.874, 13.434, 9.210), 1);
		Play Effect(All Players(All Teams), Ring Explosion, Yellow, Vector(-59.874, 13.434, 9.210), 3);
		Play Effect(All Players(All Teams), Buff Impact Sound, Yellow, Vector(-59.874, 13.434, 9.210), 40);
		Set Global Variable At Index(E, 0, 500);
		Create Effect(All Players(All Teams), Light Shaft, Yellow, Vector(-59.874, 11.990, 9.210), 0.400, Visible To);
		Skip If(Or(Compare(Value In Array(Global Variable(D), 0), <, 3), Compare(Value In Array(Global Variable(D), 0), >, 15)), 4);
		Play Effect(All Players(All Teams), Good Pickup Effect, Purple, Vector(-59.874, 13.434, 9.210), 1);
		Play Effect(All Players(All Teams), Explosion Sound, Purple, Vector(-59.874, 13.434, 9.210), 40);
		Set Global Variable At Index(E, 0, 150);
		Create Effect(All Players(All Teams), Light Shaft, Purple, Vector(-59.874, 11.990, 9.210), 0.400, Visible To);
		Skip If(Or(Compare(Value In Array(Global Variable(D), 0), <, 16), Compare(Value In Array(Global Variable(D), 0), >, 44)), 4);
		Play Effect(All Players(All Teams), Good Pickup Effect, Blue, Vector(-59.874, 13.434, 9.210), 1);
		Play Effect(All Players(All Teams), Explosion Sound, Blue, Vector(-59.874, 13.434, 9.210), 40);
		Set Global Variable At Index(E, 0, 50);
		Create Effect(All Players(All Teams), Light Shaft, Blue, Vector(-59.874, 11.990, 9.210), 0.400, Visible To);
		Skip If(Compare(Value In Array(Global Variable(D), 0), <, 45), 4);
		Play Effect(All Players(All Teams), Good Pickup Effect, White, Vector(-59.874, 13.434, 9.210), 1);
		Play Effect(All Players(All Teams), Explosion Sound, White, Vector(-59.874, 13.434, 9.210), 40);
		Set Global Variable At Index(E, 0, 15);
		Create Effect(All Players(All Teams), Light Shaft, White, Vector(-59.874, 11.990, 9.210), 0.400, Visible To);
		Set Global Variable At Index(C, 0, Last Created Entity);
		Skip If(Compare(Value In Array(Global Variable(D), 1), ==, 1), 2);
		Set Global Variable At Index(F, 0, Random Value In Array(All Heroes));
		Create In-World Text(All Players(All Teams), Hero Icon String(Value In Array(Global Variable(F), 0)), Vector(-59.874, 13.434,
			9.210), 1.200, Clip Against Surfaces, Visible To and String, White, Default Visibility);
		Skip If(Compare(Value In Array(Global Variable(D), 1), >, 1), 1);
		Create In-World Text(All Players(All Teams), String("{0}: {1}", String("Credits", Null, Null, Null), Value In Array(
			Global Variable(E), 0), Null), Vector(-59.874, 13.434, 9.210), 1.200, Clip Against Surfaces, Visible To and String, White,
			Default Visibility);
		Set Global Variable At Index(C, 4, Last Text ID);
	}
}

rule("| DROP 2 | / G.VARS: B,D,E,C,F /")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(B) == 1;
	}

	actions
	{
		Wait(1.750, Ignore Condition);
		Skip If(Compare(Value In Array(Global Variable(D), 2), >, 2), 5);
		Play Effect(All Players(All Teams), Good Pickup Effect, Yellow, Vector(-60.674, 13.434, 10.010), 1);
		Play Effect(All Players(All Teams), Ring Explosion, Yellow, Vector(-60.674, 13.434, 10.010), 3);
		Play Effect(All Players(All Teams), Buff Impact Sound, Yellow, Vector(-60.674, 13.434, 10.010), 40);
		Set Global Variable At Index(E, 1, 500);
		Create Effect(All Players(All Teams), Light Shaft, Yellow, Vector(-60.674, 11.990, 10.010), 0.400, Visible To);
		Skip If(Or(Compare(Value In Array(Global Variable(D), 2), <, 3), Compare(Value In Array(Global Variable(D), 2), >, 15)), 4);
		Play Effect(All Players(All Teams), Good Pickup Effect, Purple, Vector(-60.674, 13.434, 10.010), 1);
		Play Effect(All Players(All Teams), Explosion Sound, Purple, Vector(-60.674, 13.434, 10.010), 40);
		Set Global Variable At Index(E, 1, 150);
		Create Effect(All Players(All Teams), Light Shaft, Purple, Vector(-60.674, 11.990, 10.010), 0.400, Visible To);
		Skip If(Or(Compare(Value In Array(Global Variable(D), 2), <, 16), Compare(Value In Array(Global Variable(D), 2), >, 44)), 4);
		Play Effect(All Players(All Teams), Good Pickup Effect, Blue, Vector(-60.674, 13.434, 10.010), 1);
		Play Effect(All Players(All Teams), Explosion Sound, Blue, Vector(-60.674, 13.434, 10.010), 40);
		Set Global Variable At Index(E, 1, 50);
		Create Effect(All Players(All Teams), Light Shaft, Blue, Vector(-60.674, 11.990, 10.010), 0.400, Visible To);
		Skip If(Compare(Value In Array(Global Variable(D), 2), <, 45), 4);
		Play Effect(All Players(All Teams), Good Pickup Effect, White, Vector(-60.674, 13.434, 10.010), 1);
		Play Effect(All Players(All Teams), Explosion Sound, White, Vector(-60.674, 13.434, 10.010), 40);
		Set Global Variable At Index(E, 1, 15);
		Create Effect(All Players(All Teams), Light Shaft, White, Vector(-60.674, 11.990, 10.010), 0.400, Visible To);
		Set Global Variable At Index(C, 1, Last Created Entity);
		Skip If(Compare(Value In Array(Global Variable(D), 3), ==, 1), 2);
		Set Global Variable At Index(F, 1, Random Value In Array(All Heroes));
		Create In-World Text(All Players(All Teams), Hero Icon String(Value In Array(Global Variable(F), 1)), Vector(-60.674, 13.434,
			10.010), 1.200, Clip Against Surfaces, Visible To and String, White, Default Visibility);
		Skip If(Compare(Value In Array(Global Variable(D), 3), >, 1), 1);
		Create In-World Text(All Players(All Teams), String("{0}: {1}", String("Credits", Null, Null, Null), Value In Array(
			Global Variable(E), 1), Null), Vector(-60.674, 13.434, 10.010), 1.200, Clip Against Surfaces, Visible To and String, White,
			Default Visibility);
		Set Global Variable At Index(C, 5, Last Text ID);
	}
}

rule("| DROP 3 | / G.VARS: B,D,E,C,F /")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(B) == 1;
	}

	actions
	{
		Wait(2.500, Ignore Condition);
		Skip If(Compare(Value In Array(Global Variable(D), 4), >, 2), 5);
		Play Effect(All Players(All Teams), Good Pickup Effect, Yellow, Vector(-61.474, 13.434, 10.810), 1);
		Play Effect(All Players(All Teams), Ring Explosion, Yellow, Vector(-61.474, 13.434, 10.810), 3);
		Play Effect(All Players(All Teams), Buff Impact Sound, Yellow, Vector(-61.474, 13.434, 10.810), 40);
		Set Global Variable At Index(E, 2, 500);
		Create Effect(All Players(All Teams), Light Shaft, Yellow, Vector(-61.474, 11.990, 10.810), 0.400, Visible To);
		Skip If(Or(Compare(Value In Array(Global Variable(D), 4), <, 3), Compare(Value In Array(Global Variable(D), 4), >, 15)), 4);
		Play Effect(All Players(All Teams), Good Pickup Effect, Purple, Vector(-61.474, 13.434, 10.810), 1);
		Play Effect(All Players(All Teams), Explosion Sound, Purple, Vector(-61.474, 13.434, 10.810), 40);
		Set Global Variable At Index(E, 2, 150);
		Create Effect(All Players(All Teams), Light Shaft, Purple, Vector(-61.474, 11.990, 10.810), 0.400, Visible To);
		Skip If(Or(Compare(Value In Array(Global Variable(D), 4), <, 16), Compare(Value In Array(Global Variable(D), 4), >, 44)), 4);
		Play Effect(All Players(All Teams), Good Pickup Effect, Blue, Vector(-61.474, 13.434, 10.810), 1);
		Play Effect(All Players(All Teams), Explosion Sound, Blue, Vector(-61.474, 13.434, 10.810), 40);
		Set Global Variable At Index(E, 2, 50);
		Create Effect(All Players(All Teams), Light Shaft, Blue, Vector(-61.474, 11.990, 10.810), 0.400, Visible To);
		Skip If(Compare(Value In Array(Global Variable(D), 4), <, 45), 4);
		Play Effect(All Players(All Teams), Good Pickup Effect, White, Vector(-61.474, 13.434, 10.810), 1);
		Play Effect(All Players(All Teams), Explosion Sound, White, Vector(-61.474, 13.434, 10.810), 40);
		Set Global Variable At Index(E, 2, 15);
		Create Effect(All Players(All Teams), Light Shaft, White, Vector(-61.474, 11.990, 10.810), 0.400, Visible To);
		Set Global Variable At Index(C, 2, Last Created Entity);
		Skip If(Compare(Value In Array(Global Variable(D), 5), ==, 1), 2);
		Set Global Variable At Index(F, 2, Random Value In Array(All Heroes));
		Create In-World Text(All Players(All Teams), Hero Icon String(Value In Array(Global Variable(F), 2)), Vector(-61.474, 13.434,
			10.810), 1.200, Clip Against Surfaces, Visible To and String, White, Default Visibility);
		Skip If(Compare(Value In Array(Global Variable(D), 5), >, 1), 1);
		Create In-World Text(All Players(All Teams), String("{0}: {1}", String("Credits", Null, Null, Null), Value In Array(
			Global Variable(E), 2), Null), Vector(-61.474, 13.434, 10.810), 1.200, Clip Against Surfaces, Visible To and String, White,
			Default Visibility);
		Set Global Variable At Index(C, 6, Last Text ID);
	}
}

rule("| DROP 4 | / G.VARS: B,D,E,C,F /")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global Variable(B) == 1;
	}

	actions
	{
		Wait(3.250, Ignore Condition);
		Skip If(Compare(Value In Array(Global Variable(D), 6), >, 2), 5);
		Play Effect(All Players(All Teams), Good Pickup Effect, Yellow, Vector(-62.274, 13.434, 11.610), 1);
		Play Effect(All Players(All Teams), Ring Explosion, Yellow, Vector(-62.274, 13.434, 11.610), 3);
		Play Effect(All Players(All Teams), Buff Impact Sound, Yellow, Vector(-62.274, 13.434, 11.610), 40);
		Set Global Variable At Index(J, 3, 500);
		Create Effect(All Players(All Teams), Light Shaft, Yellow, Vector(-62.274, 11.990, 11.610), 0.400, Visible To);
		Skip If(Or(Compare(Value In Array(Global Variable(D), 6), <, 3), Compare(Value In Array(Global Variable(D), 6), >, 15)), 4);
		Play Effect(All Players(All Teams), Good Pickup Effect, Purple, Vector(-62.274, 13.434, 11.610), 1);
		Play Effect(All Players(All Teams), Explosion Sound, Purple, Vector(-62.274, 13.434, 11.610), 40);
		Set Global Variable At Index(J, 3, 150);
		Create Effect(All Players(All Teams), Light Shaft, Purple, Vector(-62.274, 11.990, 11.610), 0.400, Visible To);
		Skip If(Or(Compare(Value In Array(Global Variable(D), 6), <, 16), Compare(Value In Array(Global Variable(D), 6), >, 44)), 4);
		Play Effect(All Players(All Teams), Good Pickup Effect, Blue, Vector(-62.274, 13.434, 11.610), 1);
		Play Effect(All Players(All Teams), Explosion Sound, Blue, Vector(-62.274, 13.434, 11.610), 40);
		Set Global Variable At Index(J, 3, 50);
		Create Effect(All Players(All Teams), Light Shaft, Blue, Vector(-62.274, 11.990, 11.610), 0.400, Visible To);
		Skip If(Compare(Value In Array(Global Variable(D), 6), <, 45), 4);
		Play Effect(All Players(All Teams), Good Pickup Effect, White, Vector(-62.274, 13.434, 11.610), 1);
		Play Effect(All Players(All Teams), Explosion Sound, White, Vector(-62.274, 13.434, 11.610), 40);
		Set Global Variable At Index(J, 3, 15);
		Create Effect(All Players(All Teams), Light Shaft, White, Vector(-62.274, 11.990, 11.610), 0.400, Visible To);
		Set Global Variable At Index(C, 3, Last Created Entity);
		Skip If(Compare(Value In Array(Global Variable(D), 7), ==, 1), 2);
		Set Global Variable At Index(F, 3, Random Value In Array(All Heroes));
		Create In-World Text(All Players(All Teams), Hero Icon String(Value In Array(Global Variable(F), 3)), Vector(-62.274, 13.434,
			11.610), 1.200, Clip Against Surfaces, Visible To and String, White, Default Visibility);
		Skip If(Compare(Value In Array(Global Variable(D), 7), >, 1), 1);
		Create In-World Text(All Players(All Teams), String("{0}: {1}", String("Credits", Null, Null, Null), Value In Array(
			Global Variable(J), 3), Null), Vector(-62.274, 13.434, 11.610), 1.200, Clip Against Surfaces, Visible To and String, White,
			Default Visibility);
		Set Global Variable At Index(C, 7, Last Text ID);
	}
}

disabled rule("|--------------------------------------------------------------------------------------| FORM")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}
}

rule("| EFFECTS |")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Effect(All Players(All Teams), Orb, Blue, Vector(-104.188, 16.444, -108.783), 0.500, Visible To);
		Create Effect(All Players(All Teams), Orb, Blue, Vector(25.783, 12.444, -64.398), 0.500, Visible To);
		Create Effect(All Players(All Teams), Orb, White, Vector(-110.550, 16.444, -105.731), 0.500, Visible To);
		Create Effect(All Players(All Teams), Orb, White, Vector(14.424, 12.444, -70.251), 0.500, Visible To);
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Innocent", Null, Null, Null), String("Form", Null, Null,
			Null), Null), Vector(-104.188, 16.444, -108.783), 1.200, Clip Against Surfaces, Visible To and String, White,
			Default Visibility);
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Innocent", Null, Null, Null), String("Form", Null, Null,
			Null), Null), Vector(25.783, 12.444, -64.398), 1.200, Clip Against Surfaces, Visible To and String, White, Default Visibility);
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Normal", Null, Null, Null), String("Form", Null, Null,
			Null), Null), Vector(-110.550, 16.444, -105.731), 1.200, Clip Against Surfaces, Visible To and String, White,
			Default Visibility);
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Normal", Null, Null, Null), String("Form", Null, Null,
			Null), Null), Vector(14.424, 12.444, -70.251), 1.200, Clip Against Surfaces, Visible To and String, White, Default Visibility);
	}
}

disabled rule("|____________________ [PICK FORM] ____________________|")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}
}

rule("| INNOCENT | / P.VARS: G,A /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Or(Compare(Distance Between(Event Player, Vector(25.783, 12.444, -64.398)), <=, 1.500), Compare(Distance Between(Event Player,
			Vector(-104.188, 16.444, -108.783)), <=, 1.500)) == True;
	}

	actions
	{
		Skip If(Or(Compare(Player Variable(Event Player, A), ==, 2), Compare(Player Variable(Event Player, G), >, 0)), 7);
		Skip If(Compare(Hero Of(Event Player), ==, Hero(D.Va)), 1);
		Kill(Event Player, Null);
		Skip If(Compare(Hero Of(Event Player), ==, Hero(Lúcio)), 1);
		Respawn(Event Player);
		Set Player Variable(Event Player, A, 2);
		Wait(0.050, Ignore Condition);
		Play Effect(All Players(All Teams), Ring Explosion, Blue, Event Player, 5);
	}
}

rule("| NORMAL | / P.VARS: G,A /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Or(Compare(Distance Between(Event Player, Vector(14.424, 12.444, -70.251)), <=, 1.500), Compare(Distance Between(Event Player,
			Vector(-110.550, 16.444, -105.731)), <=, 1.500)) == True;
	}

	actions
	{
		Skip If(Or(Compare(Player Variable(Event Player, A), ==, 1), Compare(Player Variable(Event Player, G), >, 0)), 6);
		Skip If(Compare(Hero Of(Event Player), ==, Hero(D.Va)), 1);
		Kill(Event Player, Null);
		Respawn(Event Player);
		Set Player Variable(Event Player, A, 1);
		Wait(0.050, Ignore Condition);
		Play Effect(All Players(All Teams), Ring Explosion, White, Event Player, 5);
	}
}

disabled rule("|____________________ [HAVE FORM] ____________________|")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}
}

rule("| INNOCENT | / P.VARS: A,J,B /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, A) == 2;
	}

	actions
	{
		Destroy HUD Text(Value In Array(Player Variable(Event Player, J), 2));
		Create HUD Text(Event Player, String("Innocent", Null, Null, Null), String("Form", Null, Null, Null), Null, Left, 0, Blue, White,
			White, Visible To and String, Default Visibility);
		Set Player Variable At Index(Event Player, J, 2, Last Text ID);
		Create Effect(All Players(All Teams), Good Aura, Blue, Add(Event Player, Vector(0, Add(Player Variable(Event Player, B), 0.175),
			0)), 0.150, Visible To Position and Radius);
		Set Player Variable At Index(Event Player, J, 4, Last Created Entity);
		Create In-World Text(All Players(All Teams), String("Innocent", Null, Null, Null), Add(Event Player, Vector(0, Player Variable(
			Event Player, B), 0)), 1.200, Clip Against Surfaces, Visible To Position and String, White, Default Visibility);
		Set Player Variable At Index(Event Player, J, 5, Last Text ID);
		Big Message(Event Player, String("{0} {1}", String("Innocent", Null, Null, Null), String("Form", Null, Null, Null), Null));
		Set Status(Event Player, Null, Phased Out, Match Time);
		Set Damage Dealt(Event Player, 0);
		Set Healing Dealt(Event Player, 0);
	}
}

rule("| NORMAL | / P.VARS: A,J /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, A) == 1;
	}

	actions
	{
		Skip If(Compare(Player Variable(Event Player, G), >, 0), 15);
		Destroy HUD Text(Value In Array(Player Variable(Event Player, J), 2));
		Destroy Effect(Value In Array(Player Variable(Event Player, J), 4));
		Destroy In-World Text(Value In Array(Player Variable(Event Player, J), 5));
		Create HUD Text(Event Player, String("Normal", Null, Null, Null), String("Form", Null, Null, Null), Null, Left, 0, White, White,
			White, Visible To and String, Default Visibility);
		Set Player Variable At Index(Event Player, J, 2, Last Text ID);
		Big Message(Event Player, String("{0} {1}", String("Normal", Null, Null, Null), String("Form", Null, Null, Null), Null));
		Clear Status(Event Player, Phased Out);
		Set Damage Dealt(Event Player, 100);
		Set Healing Dealt(Event Player, 100);
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
		Set Primary Fire Enabled(Event Player, True);
		Allow Button(Event Player, Primary Fire);
		Set Secondary Fire Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("| LUCIO DIED | / P.VARS: A /")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, A) == 2;
		Hero Of(Event Player) == Hero(Lúcio);
	}

	actions
	{
		Respawn(Event Player);
		Wait(0.300, Ignore Condition);
		Set Ability 1 Enabled(Event Player, True);
		Wait(0.065, Ignore Condition);
		Press Button(Event Player, Ability 1);
		Wait(0.300, Ignore Condition);
		Set Ability 1 Enabled(Event Player, False);
	}
}

disabled rule("|____________________ [DISABLE ABILITIES] ____________________|")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}
}

rule("| SIGMA | Ability1,Ability2,SecondaryFire,PrimaryFire,Ult / P.VARS: A /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, A) == 2;
		Hero Of(Event Player) == Hero(Sigma);
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, False);
		Set Primary Fire Enabled(Event Player, False);
		Allow Button(Event Player, Primary Fire);
		Set Secondary Fire Enabled(Event Player, False);
		Set Ultimate Ability Enabled(Event Player, False);
	}
}

rule("| LUCIO | Ability1 and Speedboost,SecondaryFire,Ult / P.VARS: A /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, A) == 2;
		Hero Of(Event Player) == Hero(Lúcio);
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, True);
		Press Button(Event Player, Ability 1);
		Wait(0.050, Ignore Condition);
		Set Ability 1 Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, True);
		Set Primary Fire Enabled(Event Player, True);
		Allow Button(Event Player, Primary Fire);
		Set Secondary Fire Enabled(Event Player, False);
		Set Ultimate Ability Enabled(Event Player, False);
	}
}

rule("| REINHARDT | Ability1,SecondaryFire,PrimaryFire,Ult / P.VARS: A /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, A) == 2;
		Hero Of(Event Player) == Hero(Reinhardt);
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, True);
		Set Primary Fire Enabled(Event Player, False);
		Allow Button(Event Player, Primary Fire);
		Set Secondary Fire Enabled(Event Player, False);
		Set Ultimate Ability Enabled(Event Player, False);
	}
}

rule("| DOOMFIST,ZARYA | Ability1,Ability2,SecondaryFire,Ult / P.VARS: A /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, A) == 2;
		Or(Compare(Hero Of(Event Player), ==, Hero(Doomfist)), Compare(Hero Of(Event Player), ==, Hero(Zarya))) == True;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, False);
		Set Primary Fire Enabled(Event Player, True);
		Allow Button(Event Player, Primary Fire);
		Set Secondary Fire Enabled(Event Player, False);
		Set Ultimate Ability Enabled(Event Player, False);
	}
}

rule("| ANA,JUNKRAT | Ability1,Ability2,PrimaryFire,Ult / P.VARS: A /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, A) == 2;
		Or(Compare(Hero Of(Event Player), ==, Hero(Ana)), Compare(Hero Of(Event Player), ==, Hero(Junkrat))) == True;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, False);
		Set Primary Fire Enabled(Event Player, False);
		Allow Button(Event Player, Primary Fire);
		Set Secondary Fire Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, False);
	}
}

rule("| BRIGITTE,D.VA | Ability1,SecondaryFire,Ult / P.VARS: A /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, A) == 2;
		Or(Compare(Hero Of(Event Player), ==, Hero(Brigitte)), Compare(Hero Of(Event Player), ==, Hero(D.Va))) == True;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, True);
		Set Primary Fire Enabled(Event Player, True);
		Allow Button(Event Player, Primary Fire);
		Set Secondary Fire Enabled(Event Player, False);
		Set Ultimate Ability Enabled(Event Player, False);
	}
}

rule("| BAPTISTE,ORISA | Ability2,SecondaryFire,Ult / P.VARS: A /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, A) == 2;
		Or(Compare(Hero Of(Event Player), ==, Hero(Baptiste)), Compare(Hero Of(Event Player), ==, Hero(Orisa))) == True;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, False);
		Set Primary Fire Enabled(Event Player, True);
		Allow Button(Event Player, Primary Fire);
		Set Secondary Fire Enabled(Event Player, False);
		Set Ultimate Ability Enabled(Event Player, False);
	}
}

rule("| ASHE,MEI,SYMMETRA | Ability1,Ability2,Ult / P.VARS: A /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, A) == 2;
		Or(Or(Compare(Hero Of(Event Player), ==, Hero(Ashe)), Compare(Hero Of(Event Player), ==, Hero(Mei))), Compare(Hero Of(
			Event Player), ==, Hero(Symmetra))) == True;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, False);
		Set Primary Fire Enabled(Event Player, True);
		Allow Button(Event Player, Primary Fire);
		Set Secondary Fire Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, False);
	}
}

rule("| WINSTON | Ability1,Ability2,PrimaryFire / P.VARS: A /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, A) == 2;
		Hero Of(Event Player) == Hero(Winston);
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, False);
		Disallow Button(Event Player, Primary Fire);
		Set Secondary Fire Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("| MERCY | Ability2,SecondaryFire / P.VARS: A /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, A) == 2;
		Hero Of(Event Player) == Hero(Mercy);
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, False);
		Set Primary Fire Enabled(Event Player, True);
		Allow Button(Event Player, Primary Fire);
		Set Secondary Fire Enabled(Event Player, False);
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("| PHARAH,MOIRA | Ability2,PrimaryFire / P.VARS: A /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, A) == 2;
		Or(Compare(Hero Of(Event Player), ==, Hero(Pharah)), Compare(Hero Of(Event Player), ==, Hero(Moira))) == True;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, False);
		Set Primary Fire Enabled(Event Player, False);
		Allow Button(Event Player, Primary Fire);
		Set Secondary Fire Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("| SOMBRA,WRECKING BALL | SecondaryFire,Ult / P.VARS: A /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, A) == 2;
		Or(Compare(Hero Of(Event Player), ==, Hero(Sombra)), Compare(Hero Of(Event Player), ==, Hero(Wrecking Ball))) == True;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
		Set Primary Fire Enabled(Event Player, True);
		Allow Button(Event Player, Primary Fire);
		Set Secondary Fire Enabled(Event Player, False);
		Set Ultimate Ability Enabled(Event Player, False);
	}
}

rule("| ROADHOG,TORBJORN | Ability1,Ult / P.VARS: A /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, A) == 2;
		Or(Compare(Hero Of(Event Player), ==, Hero(Roadhog)), Compare(Hero Of(Event Player), ==, Hero(Torbjörn))) == True;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, True);
		Set Primary Fire Enabled(Event Player, True);
		Allow Button(Event Player, Primary Fire);
		Set Secondary Fire Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, False);
	}
}

rule("| WIDOWMAKER | Ability2,Ult / P.VARS: A /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, A) == 2;
		Hero Of(Event Player) == Hero(Widowmaker);
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, False);
		Set Primary Fire Enabled(Event Player, True);
		Allow Button(Event Player, Primary Fire);
		Set Secondary Fire Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, False);
	}
}

rule("| SOLDIER: 76 | SecondaryFire / P.VARS: A /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, A) == 2;
		Hero Of(Event Player) == Hero(Soldier: 76);
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
		Set Primary Fire Enabled(Event Player, True);
		Allow Button(Event Player, Primary Fire);
		Set Secondary Fire Enabled(Event Player, False);
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("| HANZO | Ability1 / P.VARS: A /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, A) == 2;
		Compare(Hero Of(Event Player), ==, Hero(Hanzo)) == True;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, True);
		Set Primary Fire Enabled(Event Player, True);
		Allow Button(Event Player, Primary Fire);
		Set Secondary Fire Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("| GENJI,MCCREE,ZENYATTA | Ability2 / P.VARS: A /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, A) == 2;
		Or(Or(Compare(Hero Of(Event Player), ==, Hero(Genji)), Compare(Hero Of(Event Player), ==, Hero(McCree))), Compare(Hero Of(
			Event Player), ==, Hero(Zenyatta))) == True;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, False);
		Set Primary Fire Enabled(Event Player, True);
		Allow Button(Event Player, Primary Fire);
		Set Secondary Fire Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("| BASTION | Ult / P.VARS: A /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, A) == 2;
		Hero Of(Event Player) == Hero(Bastion);
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
		Set Primary Fire Enabled(Event Player, True);
		Allow Button(Event Player, Primary Fire);
		Set Secondary Fire Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, False);
	}
}

rule("| REAPER,TRACER | Allow All / P.VARS: A /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, A) == 2;
		Or(Compare(Hero Of(Event Player), ==, Hero(Reaper)), Compare(Hero Of(Event Player), ==, Hero(Tracer))) == True;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
		Set Primary Fire Enabled(Event Player, True);
		Allow Button(Event Player, Primary Fire);
		Set Secondary Fire Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

disabled rule("|---------------------------------------------------------------------------------------| MENU")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}
}

rule("| OPEN MENU | / P.VARS: C,D,E,F,K /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
		Distance Between(Event Player, Vector(-60.100, 12.272, 11.394)) > 0.675;
		Player Variable(Event Player, D) == 0;
	}

	actions
	{
		Wait(0.800, Abort When False);
		Set Player Variable(Event Player, E, Player Variable(Event Player, C));
		Set Player Variable(Event Player, C, 1);
		Set Facing(Event Player, Vector(1.500, 0, 0), To World);
		Set Status(Event Player, Null, Rooted, Match Time);
		Disallow Button(Event Player, Primary Fire);
		Create Icon(All Players(All Teams), Add(Eye Position(Event Player), Vector(1.500, -0.220, 0.150)), Arrow: Right,
			Visible To and Position, White, False);
		Set Player Variable At Index(Event Player, K, 0, Last Created Entity);
		Create Icon(All Players(All Teams), Add(Eye Position(Event Player), Vector(1.500, -0.220, -0.150)), Arrow: Left,
			Visible To and Position, White, False);
		Set Player Variable At Index(Event Player, K, 1, Last Created Entity);
		Create Icon(All Players(All Teams), Add(Eye Position(Event Player), Vector(1.500, -0.050, 0)), Recycle, Visible To and Position,
			Yellow, False);
		Set Player Variable At Index(Event Player, K, 2, Last Created Entity);
		Create In-World Text(All Players(All Teams), Player Variable(Event Player, F), Add(Eye Position(Event Player), Vector(1.500,
			-0.080, 0)), 1.200, Clip Against Surfaces, Visible To Position and String, White, Default Visibility);
		Set Player Variable At Index(Event Player, K, 3, Last Text ID);
		Create In-World Text(All Players(All Teams), Hero Icon String(Hero Of(Event Player)), Add(Eye Position(Event Player), Vector(1.500,
			-0.220, 0)), 1.600, Clip Against Surfaces, Visible To Position and String, White, Default Visibility);
		Set Player Variable At Index(Event Player, K, 4, Last Text ID);
		Wait(0.800, Ignore Condition);
		Set Player Variable(Event Player, D, 1);
	}
}

rule("| CLOSE MENU | / P.VARS: C,D,E,F,K /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
		Player Variable(Event Player, D) == 1;
	}

	actions
	{
		Set Player Variable(Event Player, D, 0);
		Set Player Variable(Event Player, C, Player Variable(Event Player, E));
		Clear Status(Event Player, Rooted);
		Destroy Icon(Value In Array(Player Variable(Event Player, K), 0));
		Destroy Icon(Value In Array(Player Variable(Event Player, K), 1));
		Destroy Icon(Value In Array(Player Variable(Event Player, K), 2));
		Destroy In-World Text(Value In Array(Player Variable(Event Player, K), 3));
		Destroy In-World Text(Value In Array(Player Variable(Event Player, K), 4));
		Set Player Variable(Event Player, K, 0);
		Wait(0.300, Ignore Condition);
		Skip If(And(Compare(Hero Of(Event Player), ==, Hero(Winston)), Compare(Player Variable(Event Player, A), ==, 2)), 1);
		Allow Button(Event Player, Primary Fire);
	}
}

rule("| INCREASE SPEED | / P.VARS: D,F /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Add(Eye Position(Event Player), Vector(1.500, 0, 0.150)), Ray Cast Hit Position(Eye Position(Event Player), Add(
			Multiply(Facing Direction Of(Event Player), Distance Between(Add(Eye Position(Event Player), Vector(1.500, 0, 0.150)),
			Eye Position(Event Player))), Eye Position(Event Player)), Null, All Players(All Teams), True)) <= 0.060;
		Player Variable(Event Player, D) == 1;
		Player Variable(Event Player, F) < 998;
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Wait(0.005, Ignore Condition);
		Modify Player Variable(Event Player, F, Add, 2);
		Set Move Speed(Event Player, Player Variable(Event Player, F));
		Loop If Condition Is True;
	}
}

rule("| DECREASE SPEED | / P.VARS: D,F /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Add(Eye Position(Event Player), Vector(1.500, 0, -0.150)), Ray Cast Hit Position(Eye Position(Event Player), Add(
			Multiply(Facing Direction Of(Event Player), Distance Between(Add(Eye Position(Event Player), Vector(1.500, 0, -0.150)),
			Eye Position(Event Player))), Eye Position(Event Player)), Null, All Players(All Teams), True)) <= 0.060;
		Player Variable(Event Player, D) == 1;
		Player Variable(Event Player, F) > 2;
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Wait(0.005, Ignore Condition);
		Modify Player Variable(Event Player, F, Subtract, 2);
		Set Move Speed(Event Player, Player Variable(Event Player, F));
		Loop If Condition Is True;
	}
}

rule("| DEFAULT SPEED | / P.VARS: D,F /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Add(Eye Position(Event Player), Vector(1.500, 0.170, 0)), Ray Cast Hit Position(Eye Position(Event Player), Add(
			Multiply(Facing Direction Of(Event Player), Distance Between(Add(Eye Position(Event Player), Vector(1.500, 0.170, 0)),
			Eye Position(Event Player))), Eye Position(Event Player)), Null, All Players(All Teams), True)) <= 0.060;
		Player Variable(Event Player, D) == 1;
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Set Player Variable(Event Player, F, 100);
		Set Move Speed(Event Player, Player Variable(Event Player, F));
	}
}

rule("| CHANGE HERO | / P.VARS: D,L /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Add(Eye Position(Event Player), Vector(1.500, -0.120, 0)), Ray Cast Hit Position(Eye Position(Event Player), Add(
			Multiply(Facing Direction Of(Event Player), Distance Between(Add(Eye Position(Event Player), Vector(1.500, -0.120, 0)),
			Eye Position(Event Player))), Eye Position(Event Player)), Null, All Players(All Teams), True)) <= 0.060;
		Player Variable(Event Player, D) == 1;
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Set Player Variable At Index(Event Player, L, 0, 1);
		Set Player Variable At Index(Event Player, L, 1, Position Of(Event Player));
		Set Player Variable At Index(Event Player, L, 2, Vector Towards(Eye Position(Event Player), Add(Multiply(Facing Direction Of(
			Event Player), 3), Eye Position(Event Player))));
		Wait(0.100, Ignore Condition);
		Set Player Allowed Heroes(Event Player, Remove From Array(All Heroes, Hero Of(Event Player)));
	}
}

rule("| TELEPORT WHEN CHANGED HERO | / P.VARS: L /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Value In Array(Player Variable(Event Player, L), 0) == 1;
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Wait(0.025, Ignore Condition);
		Teleport(Event Player, Value In Array(Player Variable(Event Player, L), 1));
		Set Facing(Event Player, Value In Array(Player Variable(Event Player, L), 2), To World);
		Set Player Variable At Index(Event Player, L, 0, 0);
		Set Player Allowed Heroes(Event Player, All Heroes);
	}
}

disabled rule("|----------------------------------------------------------------------| LEADER AND MODER FEATURES")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}
}

rule("| CHECK LEADER SLOT | / P.VARS: G /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Players In Slot(0, Team 1) == Event Player;
	}

	actions
	{
		Set Player Variable(Event Player, G, 1);
	}
}

rule("| START SETTINGS FOR MODER/LEADER | / P.VARS: G,C,F,H,A,J /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, G) > 0;
	}

	actions
	{
		Skip If(Compare(Player Variable(Event Player, G), ==, 2), 3);
		Set Player Variable(Event Player, C, 1);
		Set Player Variable(Event Player, H, 1);
		Set Player Variable(Event Player, F, 100);
		Skip If(Compare(Player Variable(Event Player, G), ==, 1), 7);
		Set Player Variable(Event Player, A, 0);
		Set Player Variable(Event Player, H, 1);
		Destroy HUD Text(Value In Array(Player Variable(Event Player, J), 2));
		Destroy Effect(Value In Array(Player Variable(Event Player, J), 4));
		Destroy In-World Text(Value In Array(Player Variable(Event Player, J), 5));
		Set Damage Dealt(Event Player, 100);
		Set Healing Dealt(Event Player, 100);
	}
}

rule("| HUD, EFFECTS FOR MODER/LEADER | / P.VARS: G,H,B,J /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, G) > 0;
	}

	actions
	{
		Skip If(Compare(Player Variable(Event Player, G), ==, 1), 12);
		Destroy HUD Text(Value In Array(Player Variable(Event Player, J), 2));
		Destroy Effect(Value In Array(Player Variable(Event Player, J), 4));
		Destroy In-World Text(Value In Array(Player Variable(Event Player, J), 5));
		Wait(0.005, Ignore Condition);
		Create HUD Text(Event Player, String("Moderate", Null, Null, Null), Null, Null, Left, 0, Yellow, White, White, String,
			Default Visibility);
		Set Player Variable At Index(Event Player, J, 2, Last Text ID);
		Create HUD Text(Event Player, String("{0}: {1}", String("Phase", Null, Null, Null), Player Variable(Event Player, H), Null), Null,
			Null, Left, 1, Yellow, White, White, String, Default Visibility);
		Set Player Variable At Index(Event Player, J, 3, Last Text ID);
		Create Effect(All Players(All Teams), Good Aura, Yellow, Add(Event Player, Vector(0, Add(Player Variable(Event Player, B), 0.175),
			0)), 0.150, Visible To Position and Radius);
		Set Player Variable At Index(Event Player, J, 4, Last Created Entity);
		Create In-World Text(All Players(All Teams), String("Moderate", Null, Null, Null), Add(Event Player, Vector(0, Player Variable(
			Event Player, B), 0)), 1.200, Clip Against Surfaces, Visible To Position and String, White, Default Visibility);
		Set Player Variable At Index(Event Player, J, 5, Last Text ID);
		Skip If(Compare(Player Variable(Event Player, G), ==, 2), 7);
		Create HUD Text(Event Player, String("Leader", Null, Null, Null), Null, Null, Left, 0, Red, White, White, String,
			Default Visibility);
		Create HUD Text(Event Player, String("{0}: {1}", String("Phase", Null, Null, Null), Player Variable(Event Player, H), Null), Null,
			Null, Left, 1, Red, White, White, String, Default Visibility);
		Create Effect(All Players(All Teams), Good Aura, Red, Add(Event Player, Vector(0, Add(Player Variable(Event Player, B), 0.175),
			0)), 0.150, Visible To Position and Radius);
		Set Player Variable At Index(Event Player, J, 2, Last Created Entity);
		Wait(1, Ignore Condition);
		Create In-World Text(All Players(All Teams), String("Leader", Null, Null, Null), Add(Event Player, Vector(0, Player Variable(
			Event Player, B), 0)), 1.200, Clip Against Surfaces, Visible To Position and String, White, Default Visibility);
		Set Player Variable At Index(Event Player, J, 3, Last Text ID);
	}
}

rule("| SHOW SERVER STATS TO LEADER |")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(Players In Slot(0, Team 1), String("{0}: {1}", String("Server Load", Null, Null, Null), String("{0}%", Server Load,
			Null, Null), Null), Null, Null, Left, 4, White, White, White, Visible To and String, Default Visibility);
		Create HUD Text(Players In Slot(0, Team 1), String("{0}: {1}", String("Server Load Average", Null, Null, Null), String("{0}%",
			Server Load Average, Null, Null), Null), Null, Null, Left, 5, Yellow, White, White, Visible To and String, Default Visibility);
		Create HUD Text(Players In Slot(0, Team 1), String("{0}: {1}", String("Server Load Peak", Null, Null, Null), String("{0}%",
			Server Load Peak, Null, Null), Null), Null, Null, Left, 6, Red, White, White, Visible To and String, Default Visibility);
	}
}

rule("| INVINCIBLE FOR MODER/LEADER | / P.VARS: G /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, G) > 0;
	}

	actions
	{
		Set Status(Event Player, Null, Phased Out, Match Time);
	}
}

rule("| RESTART INVINCIBLE WHEN DIED | / P.VARS: G /")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, G) > 0;
	}

	actions
	{
		Clear Status(Event Player, Phased Out);
		Wait(0.050, Ignore Condition);
		Set Status(Event Player, Null, Phased Out, Match Time);
	}
}

rule("| INFINITE ULT USING | [ALL HEROES] | / P.VARS: G /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Ultimate) == True;
		Or(Compare(Hero Of(Event Player), ==, Hero(Mei)), Compare(Hero Of(Event Player), ==, Hero(D.Va))) == False;
		Player Variable(Event Player, G) > 0;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
	}
}

rule("| WHEN CROUCHING | / P.VARS: G,I /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Player Variable(Event Player, G) > 0;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, False);
		Disallow Button(Event Player, Primary Fire);
		Set Secondary Fire Enabled(Event Player, False);
		Set Ultimate Ability Enabled(Event Player, False);
		Disallow Button(Event Player, Jump);
		Create In-World Text(Event Player, String("Target", Null, Null, Null), Add(Player Closest To Reticle(Event Player, All Teams),
			Vector(0, -0.150, 0)), 2, Do Not Clip, Visible To Position and String, White, Default Visibility);
		Set Player Variable(Event Player, I, Last Text ID);
	}
}

rule("| WHEN NOT CROUCHING | / P.VARS: G,I /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == False;
		Player Variable(Event Player, G) > 0;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
		Skip If(Compare(Player Variable(Event Player, D), ==, 1), 1);
		Allow Button(Event Player, Primary Fire);
		Set Secondary Fire Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, True);
		Allow Button(Event Player, Jump);
		Destroy In-World Text(Player Variable(Event Player, I));
	}
}

rule("| CHANGE MODES | / P.VARS: G,H /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Ability 1) == True;
		Player Variable(Event Player, G) > 0;
	}

	actions
	{
		Skip If(Compare(Player Variable(Event Player, H), >, 8), 1);
		Modify Player Variable(Event Player, H, Add, 1);
		Skip If(Compare(Player Variable(Event Player, H), <, 9), 1);
		Set Player Variable(Event Player, H, 1);
	}
}

disabled rule("|____________________ [MODE 1 (KILL)] ____________________|")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}
}

rule("| KILL PLAYER | / P.VARS: G,H /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Primary Fire) == True;
		Player Variable(Event Player, G) > 0;
		Player Variable(Event Player, H) == 1;
	}

	actions
	{
		Skip If(Or(Compare(Player Variable(Player Closest To Reticle(Event Player, All Teams), A), ==, 2), Compare(Player Variable(
			Player Closest To Reticle(Event Player, All Teams), G), >, 0)), 1);
		Kill(Player Closest To Reticle(Event Player, All Teams), Event Player);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Red, Event Player, 1);
	}
}

rule("| KILL ALL PLAYER'S | [ONLY LEADER] / P.VARS: G,H /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Ultimate) == True;
		Player Variable(Event Player, G) == 1;
		Player Variable(Event Player, H) == 1;
	}

	actions
	{
		Kill(Filtered Array(All Living Players(All Teams), Or(Compare(Player Variable(Current Array Element, A), ==, 1), Compare(
			Player Variable(Event Player, G), ==, 0))), Event Player);
		Play Effect(All Players(All Teams), Ring Explosion, Red, Event Player, 4);
	}
}

rule("| RESSURECT PLAYER | / P.VARS: G,H /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Secondary Fire) == True;
		Player Variable(Event Player, G) > 0;
		Player Variable(Event Player, H) == 1;
	}

	actions
	{
		Resurrect(Player Closest To Reticle(Event Player, All Teams));
		Play Effect(All Players(All Teams), Good Pickup Effect, Blue, Event Player, 1);
		Skip If(Or(Compare(Player Variable(Player Closest To Reticle(Event Player, All Teams), G), ==, 0), Compare(Player Variable(
			Player Closest To Reticle(Event Player, All Teams), A), ==, 1)), 1);
		Set Status(Player Closest To Reticle(Event Player, All Teams), Null, Phased Out, Match Time);
	}
}

rule("| RESSURECT ALL PLAYER'S | [ONLY LEADER] / P.VARS: G,H /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Ability 2) == True;
		Player Variable(Event Player, G) == 1;
		Player Variable(Event Player, H) == 1;
	}

	actions
	{
		Resurrect(All Dead Players(All Teams));
		Play Effect(All Players(All Teams), Ring Explosion, Blue, Event Player, 4);
		Wait(0.100, Ignore Condition);
		Set Status(Filtered Array(All Players(All Teams), Or(Compare(Player Variable(Current Array Element, G), >, 0), Compare(
			Player Variable(Current Array Element, A), ==, 2))), Null, Phased Out, Match Time);
	}
}

disabled rule("|____________________ [MODE 2 (TELEPORT)] ____________________|")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}
}

rule("| TELEPORT TO PLAYER | / P.VARS: G,H /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Primary Fire) == True;
		Player Variable(Event Player, G) > 0;
		Player Variable(Event Player, H) == 2;
	}

	actions
	{
		Teleport(Event Player, Player Closest To Reticle(Event Player, All Teams));
		Play Effect(All Players(All Teams), Good Pickup Effect, Blue, Event Player, 1);
	}
}

rule("| TELEPORT PLAYER | / P.VARS: G,H /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Secondary Fire) == True;
		Player Variable(Event Player, G) == 2;
		Player Variable(Event Player, H) == 2;
	}

	actions
	{
		Skip If(Compare(Player Variable(Player Closest To Reticle(Event Player, All Teams), G), >, 0), 1);
		Teleport(Player Closest To Reticle(Event Player, All Teams), Event Player);
		Play Effect(All Players(All Teams), Good Pickup Effect, Blue, Event Player, 1);
	}
}

rule("| TELEPORT PLAYER | [LEADER] / P.VARS: G,H /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Secondary Fire) == True;
		Player Variable(Event Player, G) == 1;
		Player Variable(Event Player, H) == 2;
	}

	actions
	{
		Teleport(Player Closest To Reticle(Event Player, All Teams), Event Player);
		Play Effect(All Players(All Teams), Good Pickup Effect, Blue, Event Player, 1);
	}
}

rule("| TELEPORT ALL PLAYER'S TO LEADER | [ONLY LEADER] / P.VARS: G,H /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Ultimate) == True;
		Player Variable(Event Player, G) == 1;
		Player Variable(Event Player, H) == 2;
	}

	actions
	{
		Teleport(Filtered Array(All Players(All Teams), Compare(Player Variable(Current Array Element, G), !=, 1)), Event Player);
		Play Effect(All Players(All Teams), Ring Explosion, Blue, Event Player, 5);
	}
}

disabled rule("|____________________ [MODE 3 (FREEZE)] ____________________|")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}
}

rule("| FREEZE PLAYER | / P.VARS: G,H /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Primary Fire) == True;
		Player Variable(Event Player, G) == 2;
		Player Variable(Event Player, H) == 3;
	}

	actions
	{
		Skip If(Compare(Player Variable(Player Closest To Reticle(Event Player, All Teams), G), >, 0), 1);
		Set Status(Player Closest To Reticle(Event Player, All Teams), Event Player, Frozen, Match Time);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Red, Event Player, 1);
	}
}

rule("| FREEZE PLAYER | [LEADER] / P.VARS: G,H /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Primary Fire) == True;
		Player Variable(Event Player, G) == 1;
		Player Variable(Event Player, H) == 3;
	}

	actions
	{
		Set Status(Player Closest To Reticle(Event Player, All Teams), Event Player, Frozen, Match Time);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Red, Event Player, 1);
	}
}

rule("| FREEZE ALL PLAYER'S | [ONLY LEADER] / P.VARS: G,H /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Ultimate) == True;
		Player Variable(Event Player, G) == 1;
		Player Variable(Event Player, H) == 3;
	}

	actions
	{
		Set Status(Filtered Array(All Players(All Teams), Compare(Player Variable(Current Array Element, G), !=, 1)), Event Player, Frozen,
			Match Time);
		Play Effect(All Players(All Teams), Ring Explosion, Red, Event Player, 4);
	}
}

rule("| UNFREEZE PLAYER | / P.VARS: G,H /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Secondary Fire) == True;
		Player Variable(Event Player, G) > 0;
		Player Variable(Event Player, H) == 3;
	}

	actions
	{
		Clear Status(Player Closest To Reticle(Event Player, All Teams), Frozen);
		Play Effect(All Players(All Teams), Good Pickup Effect, Blue, Event Player, 1);
	}
}

rule("| UNFREEZE ALL PLAYER'S | [ONLY LEADER] / P.VARS: G,H /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Ability 2) == True;
		Player Variable(Event Player, G) == 1;
		Player Variable(Event Player, H) == 3;
	}

	actions
	{
		Clear Status(All Players(All Teams), Frozen);
		Play Effect(All Players(All Teams), Ring Explosion, Blue, Event Player, 4);
	}
}

disabled rule("|____________________ [MODE 4 (KNOCK DOWN)] ____________________|")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}
}

rule("| KNOCK DOWN PLAYER | / P.VARS: G,H /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Primary Fire) == True;
		Player Variable(Event Player, G) == 2;
		Player Variable(Event Player, H) == 4;
	}

	actions
	{
		Skip If(Compare(Player Variable(Player Closest To Reticle(Event Player, All Teams), G), >, 0), 1);
		Set Status(Player Closest To Reticle(Event Player, All Teams), Event Player, Knocked Down, Match Time);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Red, Event Player, 1);
	}
}

rule("| KNOCK DOWN PLAYER | [LEADER] / P.VARS: G,H /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Primary Fire) == True;
		Player Variable(Event Player, G) == 1;
		Player Variable(Event Player, H) == 4;
	}

	actions
	{
		Set Status(Player Closest To Reticle(Event Player, All Teams), Event Player, Knocked Down, Match Time);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Red, Event Player, 1);
	}
}

rule("| KNOCK DOWN ALL PLAYER'S | [ONLY LEADER] / P.VARS: G,H /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Ultimate) == True;
		Player Variable(Event Player, G) == 1;
		Player Variable(Event Player, H) == 4;
	}

	actions
	{
		Set Status(Filtered Array(All Players(All Teams), Compare(Player Variable(Current Array Element, G), !=, 1)), Event Player,
			Knocked Down, Match Time);
		Play Effect(All Players(All Teams), Ring Explosion, Red, Event Player, 4);
	}
}

rule("| LET PLAYER STAND | / P.VARS: G,H /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Secondary Fire) == True;
		Player Variable(Event Player, G) > 0;
		Player Variable(Event Player, H) == 4;
	}

	actions
	{
		Clear Status(Player Closest To Reticle(Event Player, All Teams), Knocked Down);
		Play Effect(All Players(All Teams), Good Pickup Effect, Blue, Event Player, 1);
	}
}

rule("| LET ALL PLAYER'S STAND | [ONLY LEADER] / P.VARS: G,H /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Ability 2) == True;
		Player Variable(Event Player, G) == 1;
		Player Variable(Event Player, H) == 4;
	}

	actions
	{
		Clear Status(All Players(All Teams), Knocked Down);
		Play Effect(All Players(All Teams), Ring Explosion, Blue, Event Player, 4);
	}
}

disabled rule("|____________________ [MODE 5 (BURNING)] ____________________|")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}
}

rule("| BURN PLAYER | / P.VARS: G,H /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Primary Fire) == True;
		Player Variable(Event Player, G) == 2;
		Player Variable(Event Player, H) == 5;
	}

	actions
	{
		Skip If(Compare(Player Variable(Player Closest To Reticle(Event Player, All Teams), G), >, 0), 1);
		Set Status(Player Closest To Reticle(Event Player, All Teams), Event Player, Burning, Match Time);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Red, Event Player, 1);
	}
}

rule("| BURN PLAYER | [LEADER] / P.VARS: G,H /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Primary Fire) == True;
		Player Variable(Event Player, G) == 1;
		Player Variable(Event Player, H) == 5;
	}

	actions
	{
		Set Status(Player Closest To Reticle(Event Player, All Teams), Event Player, Burning, Match Time);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Red, Event Player, 1);
	}
}

rule("| BURN ALL PLAYER'S | [ONLY LEADER] / P.VARS: G,H /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Ultimate) == True;
		Player Variable(Event Player, G) == 1;
		Player Variable(Event Player, H) == 5;
	}

	actions
	{
		Set Status(Filtered Array(All Players(All Teams), Compare(Player Variable(Current Array Element, G), !=, 1)), Event Player,
			Burning, Match Time);
		Play Effect(All Players(All Teams), Ring Explosion, Red, Event Player, 4);
	}
}

rule("| UNBURN PLAYER | / P.VARS: G,H /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Secondary Fire) == True;
		Player Variable(Event Player, G) > 0;
		Player Variable(Event Player, H) == 5;
	}

	actions
	{
		Clear Status(Player Closest To Reticle(Event Player, All Teams), Burning);
		Play Effect(All Players(All Teams), Good Pickup Effect, Blue, Event Player, 1);
	}
}

rule("| UNBURN ALL PLAYER'S | [ONLY LEADER] / P.VARS: G,H /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Ability 2) == True;
		Player Variable(Event Player, G) == 1;
		Player Variable(Event Player, H) == 5;
	}

	actions
	{
		Clear Status(All Players(All Teams), Burning);
		Play Effect(All Players(All Teams), Ring Explosion, Blue, Event Player, 4);
	}
}

disabled rule("|____________________ [MODE 6 (SELF)] ____________________|")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}
}

rule("| KILL/RES YOURSELF | / P.VARS: G,H /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Primary Fire) == True;
		Player Variable(Event Player, G) > 0;
		Player Variable(Event Player, H) == 6;
	}

	actions
	{
		Skip If(Compare(Is Dead(Event Player), ==, True), 1);
		Kill(Event Player, Event Player);
		Skip If(Compare(Is Alive(Event Player), ==, True), 2);
		Resurrect(Event Player);
		Play Effect(All Players(All Teams), Good Pickup Effect, Blue, Event Player, 1);
	}
}

rule("| FREEZE/UNFREEZE YOURSELF | / P.VARS: G,H /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Secondary Fire) == True;
		Player Variable(Event Player, G) > 0;
		Player Variable(Event Player, H) == 6;
	}

	actions
	{
		Skip If(Compare(Has Status(Event Player, Frozen), ==, True), 2);
		Set Status(Event Player, Event Player, Frozen, Match Time);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Red, Event Player, 1);
		Skip If(Compare(Has Status(Event Player, Frozen), ==, False), 2);
		Clear Status(Event Player, Frozen);
		Play Effect(All Players(All Teams), Good Pickup Effect, Blue, Event Player, 1);
	}
}

rule("| KNOCK DOWN/LET STAND YOURSELF | / P.VARS: G,H /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Ultimate) == True;
		Player Variable(Event Player, G) > 0;
		Player Variable(Event Player, H) == 6;
	}

	actions
	{
		Skip If(Compare(Has Status(Event Player, Knocked Down), ==, True), 2);
		Set Status(Event Player, Event Player, Knocked Down, Match Time);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Red, Event Player, 1);
		Skip If(Compare(Has Status(Event Player, Knocked Down), ==, False), 2);
		Clear Status(Event Player, Knocked Down);
		Play Effect(All Players(All Teams), Good Pickup Effect, Blue, Event Player, 1);
	}
}

rule("| BURN/UNBURN YOURSELF | / P.VARS: G,H /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Ability 2) == True;
		Player Variable(Event Player, G) > 0;
		Player Variable(Event Player, H) == 6;
	}

	actions
	{
		Skip If(Compare(Has Status(Event Player, Burning), ==, True), 2);
		Set Status(Event Player, Event Player, Burning, Match Time);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Red, Event Player, 1);
		Skip If(Compare(Has Status(Event Player, Burning), ==, False), 2);
		Clear Status(Event Player, Burning);
		Play Effect(All Players(All Teams), Good Pickup Effect, Blue, Event Player, 1);
	}
}

disabled rule("|____________________ [MODE 7 (PUSH)] ____________________|")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}
}

rule("| PUSH PLAYER | / P.VARS: G,H /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Primary Fire) == True;
		Player Variable(Event Player, G) == 2;
		Player Variable(Event Player, H) == 7;
	}

	actions
	{
		Skip If(Compare(Player Variable(Player Closest To Reticle(Event Player, All Teams), G), >, 0), 1);
		Apply Impulse(Player Closest To Reticle(Event Player, All Teams), Facing Direction Of(Event Player), 50, To World,
			Cancel Contrary Motion);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Red, Event Player, 1);
	}
}

rule("| PUSH PLAYER | [LEADER] / P.VARS: G,H /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Primary Fire) == True;
		Player Variable(Event Player, G) == 1;
		Player Variable(Event Player, H) == 7;
	}

	actions
	{
		Apply Impulse(Player Closest To Reticle(Event Player, All Teams), Facing Direction Of(Event Player), 50, To World,
			Cancel Contrary Motion);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Red, Event Player, 1);
	}
}

disabled rule("|____________________ [MODE 8 (INVISIBILITY)] ____________________|")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}
}

rule("| INVISIBILITY ON | / P.VARS: G,H,J,M /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Primary Fire) == True;
		Player Variable(Event Player, G) > 0;
		Player Variable(Event Player, H) == 8;
		Player Variable(Event Player, M) == 0;
	}

	actions
	{
		Play Effect(All Players(All Teams), Good Pickup Effect, Blue, Event Player, 1);
		Wait(0.200, Ignore Condition);
		Set Invisible(Event Player, All);
		Destroy In-World Text(Value In Array(Player Variable(Event Player, J), 0));
		Destroy In-World Text(Value In Array(Player Variable(Event Player, J), 1));
		Destroy Effect(Value In Array(Player Variable(Event Player, J), 2));
		Destroy In-World Text(Value In Array(Player Variable(Event Player, J), 3));
		Destroy Effect(Value In Array(Player Variable(Event Player, J), 4));
		Destroy In-World Text(Value In Array(Player Variable(Event Player, J), 5));
		Set Player Variable(Event Player, M, 1);
	}
}

rule("| INVISIBILITY OFF | / P.VARS: G,H,J,M /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Secondary Fire) == True;
		Player Variable(Event Player, G) == 2;
		Player Variable(Event Player, H) == 8;
		Player Variable(Event Player, M) == 1;
	}

	actions
	{
		Play Effect(All Players(All Teams), Bad Pickup Effect, Red, Event Player, 1);
		Wait(0.200, Ignore Condition);
		Create Effect(All Players(All Teams), Good Aura, Yellow, Add(Event Player, Vector(0, Add(Player Variable(Event Player, B), 0.175),
			0)), 0.150, Visible To Position and Radius);
		Set Player Variable At Index(Event Player, J, 4, Last Created Entity);
		Create In-World Text(All Players(All Teams), String("Moderate", Null, Null, Null), Add(Event Player, Vector(0, Player Variable(
			Event Player, B), 0)), 1.200, Clip Against Surfaces, Visible To Position and String, White, Default Visibility);
		Set Player Variable At Index(Event Player, J, 5, Last Text ID);
		Set Player Variable(Event Player, M, 0);
	}
}

rule("| INVISIBILITY OFF | [LEADER] / P.VARS: G,H,J,M /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Secondary Fire) == True;
		Player Variable(Event Player, G) == 1;
		Player Variable(Event Player, H) == 8;
		Player Variable(Event Player, M) == 1;
	}

	actions
	{
		Play Effect(All Players(All Teams), Bad Pickup Effect, Red, Event Player, 1);
		Wait(0.200, Ignore Condition);
		Create Effect(All Players(All Teams), Good Aura, Red, Add(Event Player, Vector(0, Add(Player Variable(Event Player, B), 0.175),
			0)), 0.150, Visible To Position and Radius);
		Set Player Variable At Index(Event Player, J, 2, Last Created Entity);
		Create In-World Text(All Players(All Teams), String("Leader", Null, Null, Null), Add(Event Player, Vector(0, Player Variable(
			Event Player, B), 0)), 1.200, Clip Against Surfaces, Visible To Position and String, White, Default Visibility);
		Set Player Variable At Index(Event Player, J, 3, Last Text ID);
		Set Player Variable(Event Player, M, 0);
	}
}

disabled rule("|____________________ [GIVE/TAKE MODER] ____________________|")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}
}

rule("| GIVE/TAKE MODER | [ONLY LEADER] / P.VARS: G,H,J,A /")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Crouch) == True;
		Is Button Held(Event Player, Jump) == True;
		Player Variable(Event Player, G) == 1;
	}

	actions
	{
		Skip If(Compare(Player Variable(Player Closest To Reticle(Event Player, All Teams), H), >, 0), 4);
		Set Player Variable(Player Closest To Reticle(Event Player, All Teams), G, 2);
		Play Effect(All Players(All Teams), Good Pickup Effect, Yellow, Event Player, 1);
		Play Effect(All Players(All Teams), Good Pickup Effect, Yellow, Player Closest To Reticle(Event Player, All Teams), 1);
		Big Message(All Players(All Teams), String("{0}, {1}", String("{0} {1} {2}", String("{0} {1}", Event Player, String("Raise", Null,
			Null, Null), Null), Player Closest To Reticle(Event Player, All Teams), String("-> {0}", String("Moderate", Null, Null, Null),
			Null, Null)), String("{0}!", String("Congratulations", Null, Null, Null), Null, Null), Null));
		Skip If(Compare(Player Variable(Player Closest To Reticle(Event Player, All Teams), H), ==, 0), 12);
		Set Player Variable(Player Closest To Reticle(Event Player, All Teams), H, 0);
		Set Player Variable(Player Closest To Reticle(Event Player, All Teams), G, 0);
		Set Player Variable(Player Closest To Reticle(Event Player, All Teams), M, 0);
		Destroy HUD Text(Value In Array(Player Variable(Player Closest To Reticle(Event Player, All Teams), J), 2));
		Destroy HUD Text(Value In Array(Player Variable(Player Closest To Reticle(Event Player, All Teams), J), 3));
		Destroy Effect(Value In Array(Player Variable(Player Closest To Reticle(Event Player, All Teams), J), 4));
		Destroy In-World Text(Value In Array(Player Variable(Player Closest To Reticle(Event Player, All Teams), J), 5));
		Set Player Variable(Player Closest To Reticle(Event Player, All Teams), A, 1);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Red, Event Player, 1);
		Play Effect(All Players(All Teams), Bad Pickup Effect, Red, Player Closest To Reticle(Event Player, All Teams), 1);
		Clear Status(Player Closest To Reticle(Event Player, All Teams), Phased Out);
		Big Message(All Players(All Teams), String("{0}: {1}", Event Player, String("{0} {1} {2}", Player Closest To Reticle(Event Player,
			All Teams), String("No", Null, Null, Null), String("{0}!", String("Moderate", Null, Null, Null), Null, Null)), Null));
	}
}

disabled rule("|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-| INFO")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}
}

disabled rule("|-| Total Rules Usage (With Conditions Or Actions): 128 |-|")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}
}

disabled rule("|-| Total G.VARS Usage: A,B,C,D,E,F |-|")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}
}

disabled rule("|-| Total P.VARS Usage: Ą,B,C,D,E,F,G,H,I,J,K,L,M |-|")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}
}

disabled rule("|-| Created By \"IRLININ\" |-|")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}
}